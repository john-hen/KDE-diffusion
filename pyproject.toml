# Project meta information

[project]
name = 'KDE-diffusion'
authors = [{name='John Hennig'}]
version = '1.0.5'
description = 'Kernel density estimation via diffusion in 1d and 2d'
keywords = ['kernel density estimation', 'statistics']
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Programming Language :: Python :: 3',
    'Operating System :: OS Independent',
    'Topic :: Scientific/Engineering :: Information Analysis',
    'Intended Audience :: Science/Research',
]
license = 'MIT'
license-files = ['license.txt']
readme = 'PyPI.md'

requires-python = '>= 3.6'
dependencies = [
    'NumPy',
    'SciPy',
]

[project.optional-dependencies]
docs = [
    'Sphinx',
    'Furo',
    'MyST-parser',
    'CommonMark',
]

[dependency-groups]
test = [
    'Ruff',
    'pyTest',
    'pyTest-cov',
    'coverage-badge',
]
docs = [
    'Sphinx',
    'Furo',
    'MyST-parser',
    'Commonmark',
]
dev = [
    {include-group = 'test'},
    {include-group = 'docs'},
]

[project.urls]
Documentation = 'https://kde-diffusion.readthedocs.io'
Source        = 'https://github.com/john-hen/kde-diffusion'


# Build backend: Flit

[build-system]
requires      = ['flit_core >= 3.11']
build-backend = 'flit_core.buildapi'

[tool.flit.module]
name = 'kde_diffusion'


# Code linter: Ruff

[tool.ruff]
line-length    = 79
indent-width   = 4
target-version = 'py37'
include = ['kde_diffusion/**/*.py', 'tests/**/*.py', 'pyproject.toml']

    [tool.ruff.format]
    # The project does not actually use the Ruff formatter (only the linter),
    # but these settings would be used if it did.
    quote-style = 'single'
    line-ending = 'cr-lf'

    [tool.ruff.lint]
    preview = true
    select = [
        'F',                  # basic linter rules
        'E',                  # code style errors
        'W',                  # code style warnings
        'B',                  # possible bugs
        'C4',                 # correct comprehensions
        'FA',                 # future annotations
        'PIE',                # miscellaneous lints
        'ARG',                # unused function arguments
        'RSE',                # raised exceptions
        'Q',                  # quotation marks
        'SIM',                # simplifiable code
        'PERF',               # performance anti-pattens
        'PT',                 # pyTest style
        'PTH',                # pathlib use mandatory
        'ERA',                # commented-out code
        'T10',                # debugger calls
        'UP',                 # upgradable code
        'RUF100',             # unnecessary `noqa` directives
    ]
    ignore = [
        'E201',               # whitespace after (
        'E202',               # whitespace before (
        'E221',               # missing whitespace before operator
        'E226',               # missing whitespace around operator
        'E241',               # multiple spaces after comma
        'E251',               # unexpected spaces around keyword equals
        'E272',               # multiple spaces before keyword
        'E731',               # assignment of `lambda` expression
        'E741',               # ambiguous variable name: `l`
        'SIM108',             # ternary operator instead of if-else
        'PT011',              # `pytest.raises(ValueError)` too broad
        'PT013',              # incorrect pytest import
        'PTH201',             # never use `Path('.')`
    ]

    [tool.ruff.lint.per-file-ignores]
    '__init__.py' = [
        'F401',               # imported but unused
    ]

    [tool.ruff.lint.flake8-quotes]
    inline-quotes    = 'single'
    multiline-quotes = 'double'
    docstring-quotes = 'double'
    avoid-escape     = true


# Test runner: pyTest

[tool.pytest.ini_options]
addopts  = '--verbose'
testpaths = ['tests']


# Code coverage: Coverage.py

[tool.coverage.run]
source         = ['kde_diffusion/']
relative_files = true

[tool.coverage.report]
exclude_lines = ['pragma: no cover']
